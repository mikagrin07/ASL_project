{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPtIhQ29SfZzH9qUBgC0zFI"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["בכדי להריץ את הקוד יש להוריד את קבצי הדאטה שצירפתי בהגשה לגוגל דרייב, אני מתכננת להפוך זאת לנגיש יותר בעתיד"],"metadata":{"id":"LxOvm0w83Lmc"}},{"cell_type":"markdown","source":["Mounts Google Drive and sets up tools to display videos in Colab."],"metadata":{"id":"TD27DVNuvqR3"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b08PeZqzqzAp","executionInfo":{"status":"ok","timestamp":1742040610346,"user_tz":-120,"elapsed":28719,"user":{"displayName":"Mika Grinberg","userId":"06597200071291558479"}},"outputId":"5d44c667-e61f-4354-ee88-e6b2d4de9bb1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","import requests\n","from IPython.display import Video, display\n","\n","# Mount Google Drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","source":["Imports tools for building and evaluating an LSTM classification model."],"metadata":{"id":"BqeLClGmv4jF"}},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import LSTM, Dense, Dropout, Masking\n","from tensorflow.keras.optimizers import Adam\n","import numpy as np\n","import pandas as pd\n","import os\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.metrics import precision_score, recall_score, confusion_matrix, classification_report"],"metadata":{"id":"e8o_Y1Ghq94E","executionInfo":{"status":"ok","timestamp":1742040621296,"user_tz":-120,"elapsed":10940,"user":{"displayName":"Mika Grinberg","userId":"06597200071291558479"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["Set paths"],"metadata":{"id":"xbPrfoKIv8cQ"}},{"cell_type":"code","source":["train_path = \"/content/drive/MyDrive/ASL_project/Dataset/landmark_xy\"\n","test_path = \"/content/drive/MyDrive/ASL_project/Dataset/landmark_xy_test\"\n","allowed_labels = {'book', 'drink', 'computer_bk', 'study','science','i'}  # Only use these classes"],"metadata":{"id":"c_KtIKX-rDG7","executionInfo":{"status":"ok","timestamp":1742040621307,"user_tz":-120,"elapsed":16,"user":{"displayName":"Mika Grinberg","userId":"06597200071291558479"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["Set fixed values"],"metadata":{"id":"53c99hiav_3c"}},{"cell_type":"code","source":["MAX_FRAMES = 30  # Fixed sequence length\n","FEATURE_SIZE = 150  # Fixed feature size\n","LEARNING_RATE = 0.001  # Custom learning rate"],"metadata":{"id":"Tu1jNTkfrOdS","executionInfo":{"status":"ok","timestamp":1742040621317,"user_tz":-120,"elapsed":13,"user":{"displayName":"Mika Grinberg","userId":"06597200071291558479"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["Function to load sequences and labels"],"metadata":{"id":"s0EL99giwCMr"}},{"cell_type":"code","source":["def load_sequences(folder):\n","    sequences = []\n","    labels = []\n","    class_names = sorted([name for name in os.listdir(folder) if name in allowed_labels])  # Filter classes\n","    print(f\"Class names: {class_names}\")\n","\n","    label_encoder = LabelEncoder()\n","    label_encoder.fit(class_names)  # Encode labels\n","\n","    for class_name in class_names:\n","        class_path = os.path.join(folder, class_name)\n","\n","        if os.path.isdir(class_path):\n","            for filename in os.listdir(class_path):\n","                if filename.endswith(\".csv\"):\n","                    file_path = os.path.join(class_path, filename)\n","\n","                    try:\n","                        df = pd.read_csv(file_path, header=None)\n","\n","                        # Handle cases where the CSV has fewer or more than FEATURE_SIZE columns\n","                        if df.shape[1] < FEATURE_SIZE:\n","                            print(f\"Warning: {file_path} has {df.shape[1]} columns. Padding to {FEATURE_SIZE}.\")\n","                            missing_cols = FEATURE_SIZE - df.shape[1]\n","                            padding = np.zeros((df.shape[0], missing_cols))\n","                            df = pd.concat([df, pd.DataFrame(padding)], axis=1)\n","\n","                        elif df.shape[1] > FEATURE_SIZE:\n","                            print(f\"Warning: {file_path} has {df.shape[1]} columns. Trimming to {FEATURE_SIZE}.\")\n","                            df = df.iloc[:, :FEATURE_SIZE]\n","\n","                        total_frames = df.shape[0]  # Number of frames in the video\n","\n","                        # Select 30 frames evenly spaced\n","                        step = max(1, total_frames // MAX_FRAMES)  # Ensure at least step 1\n","                        selected_frames = df.iloc[::step].values[:MAX_FRAMES]  # Take frames in jumps\n","\n","                        # If we got fewer than 30 frames, pad with zeros\n","                        if selected_frames.shape[0] < MAX_FRAMES:\n","                            padding = np.zeros((MAX_FRAMES - selected_frames.shape[0], FEATURE_SIZE))\n","                            selected_frames = np.vstack([selected_frames, padding])\n","\n","                        sequences.append(selected_frames)\n","                        labels.append(label_encoder.transform([class_name])[0])\n","\n","                    except Exception as e:\n","                        print(f\"Error processing {file_path}: {e}\")\n","                        continue\n","\n","    X = np.array(sequences)\n","    y = np.array(labels)\n","\n","    print(f\"First X: {X[0, 0, :]}\") if len(X) > 0 else print(\"No data found.\")\n","    print(f\"Final dataset shape: X={X.shape}, y={y.shape}\")\n","\n","    return X, y, label_encoder"],"metadata":{"id":"p452a-7SrPfp","executionInfo":{"status":"ok","timestamp":1742040621336,"user_tz":-120,"elapsed":10,"user":{"displayName":"Mika Grinberg","userId":"06597200071291558479"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":["Load train and test datasets"],"metadata":{"id":"33kMnZLbwFd6"}},{"cell_type":"code","source":["X_train, y_train, label_encoder = load_sequences(train_path)\n","X_test, y_test, _ = load_sequences(test_path)  # Use the same label encoder\n","\n","# Check if dataset is loaded properly\n","if X_train.shape[0] == 0 or X_test.shape[0] == 0:\n","    raise ValueError(\"No valid training or testing data found. Please check dataset format.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Nij7tM9krUo4","executionInfo":{"status":"ok","timestamp":1742040709235,"user_tz":-120,"elapsed":87895,"user":{"displayName":"Mika Grinberg","userId":"06597200071291558479"}},"outputId":"25c6f581-d58b-4296-d590-3011193fe920"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Class names: ['book', 'computer_bk', 'drink', 'i', 'science', 'study']\n","First X: [0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.53914732 0.26693732 0.55658275 0.22724473 0.56657374 0.22963184\n"," 0.57625431 0.23325479 0.52460027 0.22467184 0.51484102 0.22466296\n"," 0.50674659 0.22587532 0.58970356 0.25350851 0.49583027 0.24574429\n"," 0.55842155 0.31797814 0.51812583 0.31557786 0.65614796 0.53017384\n"," 0.43122932 0.53726035 0.70327014 0.89347726 0.40528703 0.86426151\n"," 0.65525138 1.14852655 0.40534729 1.0890485  0.65731078 1.22987247\n"," 0.40746185 1.18055081 0.64102459 1.21643603 0.41541046 1.18120956\n"," 0.63539249 1.18028903 0.4237951  1.14689898 0.6162954  1.0563997\n"," 0.47858897 1.06349516 0.61285818 1.58657086 0.4711571  1.54059303\n"," 0.60946071 1.95611811 0.46625257 1.93513608 0.61439335 2.01980066\n"," 0.46638948 1.99988031 0.57558155 2.05021453 0.47298142 2.04116488]\n","Final dataset shape: X=(906, 30, 150), y=(906,)\n","Class names: ['book', 'computer_bk', 'drink', 'i', 'science', 'study']\n","First X: [0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.         0.         0.         0.         0.         0.\n"," 0.52030736 0.25301439 0.53534502 0.21690702 0.54348439 0.21799135\n"," 0.55333167 0.2193296  0.50657505 0.21429157 0.49900064 0.21450174\n"," 0.49144059 0.21570969 0.56033033 0.23327917 0.48038915 0.23467916\n"," 0.53582788 0.29642099 0.50617993 0.29526705 0.62549967 0.47270948\n"," 0.41493821 0.46996093 0.65088952 0.77434725 0.38572958 0.76048028\n"," 0.65844321 1.00133312 0.37192935 0.99240518 0.66516548 1.06944513\n"," 0.36642006 1.04706013 0.65712756 1.06899798 0.37542337 1.06948423\n"," 0.64807558 1.03175461 0.38334036 1.03550398 0.57952529 1.00538349\n"," 0.44604352 1.00016856 0.57149589 1.45464611 0.43860832 1.41122127\n"," 0.5583778  1.75997281 0.42515171 1.80355787 0.56251752 1.79751313\n"," 0.42167157 1.85211182 0.52560693 1.86588049 0.44643128 1.92773557]\n","Final dataset shape: X=(173, 30, 150), y=(173,)\n"]}]},{"cell_type":"markdown","source":["Build LSTM Model"],"metadata":{"id":"3Dylu5YlwJIY"}},{"cell_type":"code","source":["model = Sequential([\n","    Masking(mask_value=0.0, input_shape=(X_train.shape[1], X_train.shape[2])),\n","    LSTM(128, return_sequences=True),\n","    Dropout(0.1),\n","    LSTM(64),\n","    Dropout(0.1),\n","    Dense(64, activation='relu'),\n","    Dense(len(label_encoder.classes_), activation='softmax')\n","])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jmArNmTyraTg","executionInfo":{"status":"ok","timestamp":1742040709284,"user_tz":-120,"elapsed":43,"user":{"displayName":"Mika Grinberg","userId":"06597200071291558479"}},"outputId":"ac0ce7ef-9749-442e-94c0-f3793d6311d0"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/masking.py:47: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(**kwargs)\n"]}]},{"cell_type":"markdown","source":["Set custom learning rate and compile the model with the custom learning rat"],"metadata":{"id":"Iq_iOYL1wLzY"}},{"cell_type":"code","source":["optimizer = Adam(learning_rate=LEARNING_RATE)\n","\n","model.compile(loss='sparse_categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])"],"metadata":{"id":"lxLP4vUQrbC3","executionInfo":{"status":"ok","timestamp":1742040709318,"user_tz":-120,"elapsed":11,"user":{"displayName":"Mika Grinberg","userId":"06597200071291558479"}}},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":["Track the best epoch for confusion matrix"],"metadata":{"id":"8YTFDlfCwb40"}},{"cell_type":"code","source":["best_epoch = 0\n","best_val_accuracy = 0.0\n","best_y_pred = None"],"metadata":{"id":"KDxXOBhstHbX","executionInfo":{"status":"ok","timestamp":1742040709530,"user_tz":-120,"elapsed":210,"user":{"displayName":"Mika Grinberg","userId":"06597200071291558479"}}},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":["Custom callback to compute precision, recall & track best epoch"],"metadata":{"id":"ETUNIKLawfFY"}},{"cell_type":"code","source":["class PrecisionRecallCallback(tf.keras.callbacks.Callback):\n","    def on_epoch_end(self, epoch, logs=None):\n","        global best_epoch, best_val_accuracy, best_y_pred\n","\n","        y_pred_train = np.argmax(self.model.predict(X_train), axis=1)\n","        y_pred_test = np.argmax(self.model.predict(X_test), axis=1)\n","\n","        train_precision = precision_score(y_train, y_pred_train, average='weighted', zero_division=0)\n","        train_recall = recall_score(y_train, y_pred_train, average='weighted', zero_division=0)\n","\n","        test_precision = precision_score(y_test, y_pred_test, average='weighted', zero_division=0)\n","        test_recall = recall_score(y_test, y_pred_test, average='weighted', zero_division=0)\n","        val_accuracy = logs[\"val_accuracy\"]\n","\n","        print(f\"\\n📌 Epoch {epoch+1}: Train Precision={train_precision:.4f}, Train Recall={train_recall:.4f}, \"\n","              f\"Test Precision={test_precision:.4f}, Test Recall={test_recall:.4f}\")\n","\n","        # Track best epoch\n","        if val_accuracy > best_val_accuracy:\n","            best_val_accuracy = val_accuracy\n","            best_epoch = epoch + 1\n","            best_y_pred = y_pred_test.copy()"],"metadata":{"id":"b84teJ2mtILO","executionInfo":{"status":"ok","timestamp":1742040709541,"user_tz":-120,"elapsed":16,"user":{"displayName":"Mika Grinberg","userId":"06597200071291558479"}}},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":["Train and save model"],"metadata":{"id":"XnBRPeA6wjRr"}},{"cell_type":"code","source":["# Train model\n","model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=30, batch_size=2, callbacks=[PrecisionRecallCallback()])\n","\n","# Save model\n","model.save(\"/content/drive/MyDrive/ASL_project/Models/asl_lstm_fixed.h5\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vb9ggHBNtL7o","executionInfo":{"status":"ok","timestamp":1742041476852,"user_tz":-120,"elapsed":767305,"user":{"displayName":"Mika Grinberg","userId":"06597200071291558479"}},"outputId":"57b33402-1aec-41a4-c16c-e8b952272ad7"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 69ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n","\n","📌 Epoch 1: Train Precision=0.2915, Train Recall=0.4349, Test Precision=0.2267, Test Recall=0.3931\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 45ms/step - accuracy: 0.2784 - loss: 1.6114 - val_accuracy: 0.3931 - val_loss: 1.5683\n","Epoch 2/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 23ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\n","📌 Epoch 2: Train Precision=0.5952, Train Recall=0.4503, Test Precision=0.5496, Test Recall=0.4913\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 40ms/step - accuracy: 0.4373 - loss: 1.3598 - val_accuracy: 0.4913 - val_loss: 1.3064\n","Epoch 3/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 24ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\n","📌 Epoch 3: Train Precision=0.5832, Train Recall=0.6015, Test Precision=0.5287, Test Recall=0.5954\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 38ms/step - accuracy: 0.4905 - loss: 1.2585 - val_accuracy: 0.5954 - val_loss: 1.0298\n","Epoch 4/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 23ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\n","📌 Epoch 4: Train Precision=0.6774, Train Recall=0.6435, Test Precision=0.5797, Test Recall=0.6012\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 41ms/step - accuracy: 0.6090 - loss: 1.0218 - val_accuracy: 0.6012 - val_loss: 0.9765\n","Epoch 5/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 23ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 27ms/step\n","\n","📌 Epoch 5: Train Precision=0.6885, Train Recall=0.6424, Test Precision=0.5875, Test Recall=0.6474\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 42ms/step - accuracy: 0.6085 - loss: 0.9710 - val_accuracy: 0.6474 - val_loss: 0.9205\n","Epoch 6/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 29ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step\n","\n","📌 Epoch 6: Train Precision=0.7463, Train Recall=0.6909, Test Precision=0.5990, Test Recall=0.6647\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 42ms/step - accuracy: 0.6207 - loss: 0.9889 - val_accuracy: 0.6647 - val_loss: 0.9157\n","Epoch 7/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\n","📌 Epoch 7: Train Precision=0.7366, Train Recall=0.6424, Test Precision=0.6531, Test Recall=0.6358\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 39ms/step - accuracy: 0.6858 - loss: 0.8076 - val_accuracy: 0.6358 - val_loss: 0.9120\n","Epoch 8/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 24ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step\n","\n","📌 Epoch 8: Train Precision=0.7187, Train Recall=0.6954, Test Precision=0.6281, Test Recall=0.6069\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 39ms/step - accuracy: 0.6997 - loss: 0.7948 - val_accuracy: 0.6069 - val_loss: 0.9552\n","Epoch 9/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 23ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n","\n","📌 Epoch 9: Train Precision=0.7485, Train Recall=0.6678, Test Precision=0.6406, Test Recall=0.6243\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 41ms/step - accuracy: 0.7607 - loss: 0.6817 - val_accuracy: 0.6243 - val_loss: 0.9922\n","Epoch 10/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 23ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n","\n","📌 Epoch 10: Train Precision=0.8315, Train Recall=0.8201, Test Precision=0.7034, Test Recall=0.6821\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 40ms/step - accuracy: 0.7351 - loss: 0.6860 - val_accuracy: 0.6821 - val_loss: 0.8610\n","Epoch 11/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 24ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n","\n","📌 Epoch 11: Train Precision=0.8296, Train Recall=0.8046, Test Precision=0.7078, Test Recall=0.6994\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 40ms/step - accuracy: 0.7817 - loss: 0.5930 - val_accuracy: 0.6994 - val_loss: 0.7806\n","Epoch 12/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n","\n","📌 Epoch 12: Train Precision=0.8245, Train Recall=0.8157, Test Precision=0.7630, Test Recall=0.6879\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 39ms/step - accuracy: 0.7948 - loss: 0.5476 - val_accuracy: 0.6879 - val_loss: 0.8798\n","Epoch 13/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 37ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 48ms/step\n","\n","📌 Epoch 13: Train Precision=0.8656, Train Recall=0.8609, Test Precision=0.7777, Test Recall=0.7572\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 40ms/step - accuracy: 0.7859 - loss: 0.5622 - val_accuracy: 0.7572 - val_loss: 0.8242\n","Epoch 14/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 23ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 30ms/step\n","\n","📌 Epoch 14: Train Precision=0.8840, Train Recall=0.8709, Test Precision=0.7333, Test Recall=0.7168\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 39ms/step - accuracy: 0.8103 - loss: 0.5299 - val_accuracy: 0.7168 - val_loss: 0.9253\n","Epoch 15/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 24ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 45ms/step\n","\n","📌 Epoch 15: Train Precision=0.8652, Train Recall=0.8598, Test Precision=0.7109, Test Recall=0.7168\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 41ms/step - accuracy: 0.8717 - loss: 0.3406 - val_accuracy: 0.7168 - val_loss: 0.8067\n","Epoch 16/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 24ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n","\n","📌 Epoch 16: Train Precision=0.9046, Train Recall=0.8996, Test Precision=0.7899, Test Recall=0.7746\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 40ms/step - accuracy: 0.8795 - loss: 0.3326 - val_accuracy: 0.7746 - val_loss: 0.7348\n","Epoch 17/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 24ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n","\n","📌 Epoch 17: Train Precision=0.9055, Train Recall=0.8962, Test Precision=0.7682, Test Recall=0.7110\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 38ms/step - accuracy: 0.8677 - loss: 0.3719 - val_accuracy: 0.7110 - val_loss: 1.0148\n","Epoch 18/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 24ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n","\n","📌 Epoch 18: Train Precision=0.9390, Train Recall=0.9371, Test Precision=0.7952, Test Recall=0.7977\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 42ms/step - accuracy: 0.8868 - loss: 0.3019 - val_accuracy: 0.7977 - val_loss: 0.5931\n","Epoch 19/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 61ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 60ms/step\n","\n","📌 Epoch 19: Train Precision=0.9225, Train Recall=0.9150, Test Precision=0.7761, Test Recall=0.7803\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 46ms/step - accuracy: 0.9101 - loss: 0.2888 - val_accuracy: 0.7803 - val_loss: 0.7383\n","Epoch 20/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 28ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n","\n","📌 Epoch 20: Train Precision=0.9393, Train Recall=0.9338, Test Precision=0.7856, Test Recall=0.7803\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 47ms/step - accuracy: 0.8788 - loss: 0.3407 - val_accuracy: 0.7803 - val_loss: 0.8546\n","Epoch 21/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 27ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n","\n","📌 Epoch 21: Train Precision=0.9511, Train Recall=0.9492, Test Precision=0.8176, Test Recall=0.7919\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 46ms/step - accuracy: 0.9080 - loss: 0.2501 - val_accuracy: 0.7919 - val_loss: 0.6639\n","Epoch 22/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step\n","\n","📌 Epoch 22: Train Precision=0.9480, Train Recall=0.9470, Test Precision=0.8033, Test Recall=0.7630\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m44s\u001b[0m 52ms/step - accuracy: 0.9292 - loss: 0.2025 - val_accuracy: 0.7630 - val_loss: 0.7441\n","Epoch 23/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 42ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 63ms/step\n","\n","📌 Epoch 23: Train Precision=0.9519, Train Recall=0.9503, Test Precision=0.8353, Test Recall=0.8150\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 46ms/step - accuracy: 0.8976 - loss: 0.2576 - val_accuracy: 0.8150 - val_loss: 0.6727\n","Epoch 24/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 45ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step\n","\n","📌 Epoch 24: Train Precision=0.9577, Train Recall=0.9570, Test Precision=0.8608, Test Recall=0.7977\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 51ms/step - accuracy: 0.9342 - loss: 0.2354 - val_accuracy: 0.7977 - val_loss: 0.9325\n","Epoch 25/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 40ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 76ms/step\n","\n","📌 Epoch 25: Train Precision=0.9452, Train Recall=0.9426, Test Precision=0.7736, Test Recall=0.7283\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 53ms/step - accuracy: 0.9455 - loss: 0.1515 - val_accuracy: 0.7283 - val_loss: 1.0147\n","Epoch 26/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 27ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 27ms/step\n","\n","📌 Epoch 26: Train Precision=0.9678, Train Recall=0.9669, Test Precision=0.8462, Test Recall=0.8439\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 50ms/step - accuracy: 0.9565 - loss: 0.1363 - val_accuracy: 0.8439 - val_loss: 0.5205\n","Epoch 27/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 38ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step\n","\n","📌 Epoch 27: Train Precision=0.9564, Train Recall=0.9536, Test Precision=0.8620, Test Recall=0.8266\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m51s\u001b[0m 72ms/step - accuracy: 0.9407 - loss: 0.1761 - val_accuracy: 0.8266 - val_loss: 0.6784\n","Epoch 28/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 60ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 105ms/step\n","\n","📌 Epoch 28: Train Precision=0.9681, Train Recall=0.9669, Test Precision=0.8032, Test Recall=0.7861\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m33s\u001b[0m 55ms/step - accuracy: 0.9246 - loss: 0.2131 - val_accuracy: 0.7861 - val_loss: 0.6928\n","Epoch 29/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 30ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n","\n","📌 Epoch 29: Train Precision=0.9392, Train Recall=0.9327, Test Precision=0.8205, Test Recall=0.7861\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 52ms/step - accuracy: 0.9675 - loss: 0.1140 - val_accuracy: 0.7861 - val_loss: 0.8788\n","Epoch 30/30\n","\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n","\n","📌 Epoch 30: Train Precision=0.9298, Train Recall=0.9238, Test Precision=0.8158, Test Recall=0.8150\n","\u001b[1m453/453\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 39ms/step - accuracy: 0.9385 - loss: 0.1795 - val_accuracy: 0.8150 - val_loss: 0.6660\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]}]},{"cell_type":"markdown","source":["Evaluate best epoch with confusion matrix"],"metadata":{"id":"TNPxajoqwpN2"}},{"cell_type":"code","source":["print(f\"\\n✅ Best Epoch: {best_epoch}, Best Validation Accuracy: {best_val_accuracy:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wwzSs4MttRvP","executionInfo":{"status":"ok","timestamp":1742041476877,"user_tz":-120,"elapsed":19,"user":{"displayName":"Mika Grinberg","userId":"06597200071291558479"}},"outputId":"6302f3af-0a34-43ab-c4e2-f017c792ade1"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","✅ Best Epoch: 26, Best Validation Accuracy: 0.8439\n"]}]},{"cell_type":"markdown","source":["Compute confusion matrix"],"metadata":{"id":"ePIVMigYwq3d"}},{"cell_type":"code","source":["# Compute confusion matrix\n","conf_matrix = confusion_matrix(y_test, best_y_pred)\n","report = classification_report(y_test, best_y_pred, target_names=label_encoder.classes_, digits=4)\n","\n","print(\"\\n🔹 Confusion Matrix:\\n\", conf_matrix)\n","print(\"\\n🔹 Classification Report:\\n\", report)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dW2_lcyptSTJ","executionInfo":{"status":"ok","timestamp":1742041476935,"user_tz":-120,"elapsed":55,"user":{"displayName":"Mika Grinberg","userId":"06597200071291558479"}},"outputId":"d8026385-7a6a-4340-e381-92c386fcf592"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","🔹 Confusion Matrix:\n"," [[24  6  1  1  2  0]\n"," [ 4 20  0  1  0  5]\n"," [ 0  2 34  0  0  0]\n"," [ 0  0  0 27  0  0]\n"," [ 0  0  0  1 21  2]\n"," [ 0  1  0  0  1 20]]\n","\n","🔹 Classification Report:\n","               precision    recall  f1-score   support\n","\n","        book     0.8571    0.7059    0.7742        34\n"," computer_bk     0.6897    0.6667    0.6780        30\n","       drink     0.9714    0.9444    0.9577        36\n","           i     0.9000    1.0000    0.9474        27\n","     science     0.8750    0.8750    0.8750        24\n","       study     0.7407    0.9091    0.8163        22\n","\n","    accuracy                         0.8439       173\n","   macro avg     0.8390    0.8502    0.8414       173\n","weighted avg     0.8462    0.8439    0.8421       173\n","\n"]}]},{"cell_type":"markdown","source":["Evaluate"],"metadata":{"id":"x4kFFw1gws3C"}},{"cell_type":"code","source":["# Evaluate\n","loss, acc = model.evaluate(X_test, y_test)\n","print(f\"Test Accuracy: {acc:.2f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-hqlZ-0jtWQ_","executionInfo":{"status":"ok","timestamp":1742041477286,"user_tz":-120,"elapsed":348,"user":{"displayName":"Mika Grinberg","userId":"06597200071291558479"}},"outputId":"b642ed16-176b-4728-d73a-d2c13829fec1"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 30ms/step - accuracy: 0.7907 - loss: 0.7417\n","Test Accuracy: 0.82\n"]}]}]}